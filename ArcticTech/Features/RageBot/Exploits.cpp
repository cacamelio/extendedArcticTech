#include "Exploits.h"
#include "../Misc/Prediction.h"
#include "../../SDK/Globals.h"
#include "../AntiAim/AntiAim.h"

bool CExploits::ShouldCharge() {
	if (GlobalVars->realtime - Cheat.LocalPlayer->m_flSpawnTime() < 0.2f)
		return false;

	return ctx.tickbase_shift < target_tickbase_shift;
}

void CExploits::Run() {
	should_override_next_tickbase_shift = false;
	override_next_tickbase_shift = 0;

	if (!ctx.cmd)
		return;

	CBaseCombatWeapon* weapon = Cheat.LocalPlayer->GetActiveWeapon();

	exploit_type = E_None;

	if (!weapon)
		return;

	if (config.ragebot.aimbot.hide_shots->get())
		exploit_type = E_HideShots;
	if (config.ragebot.aimbot.doubletap->get())
		exploit_type = E_DoubleTap;

	if (exploit_type == E_None || config.antiaim.misc.fake_duck->get() || config.ragebot.aimbot.force_teleport->get()) {
		target_tickbase_shift = 0;
		return;
	}

	const int max_tickbase_charge = MaxTickbaseShift();

	if (target_tickbase_shift < max_tickbase_charge) {
		if (!(GlobalVars->realtime - ctx.last_shot_time < 0.25f || GetAsyncKeyState(VK_LBUTTON) & 0x8000 || block_charge || !ctx.send_packet)) {
			target_tickbase_shift = max_tickbase_charge;
			charged_command = ctx.cmd->command_number;
			ctx.shifted_last_tick = 0;
		}
	}
	else if (target_tickbase_shift > max_tickbase_charge) {
		target_tickbase_shift = max_tickbase_charge;
	}

	block_charge = false;
}

void CExploits::HandleTeleport(CL_Move_t cl_move, float extra_samples) {
	if (teleport_next_tick) {
		if (ctx.active_weapon && (ctx.active_weapon->m_iItemDefinitionIndex() == Ssg08 || ctx.active_weapon->m_iItemDefinitionIndex() == Awp) && defensive_ticks > 0 && defensive_ticks <= 14 && !config.ragebot.aimbot.doubletap_options->get(2))
			return;

		teleport_next_tick = false;
		target_tickbase_shift = 0;
	}

	shifting_tickbase = true;

	for (; ctx.tickbase_shift > target_tickbase_shift; --ctx.tickbase_shift) {
		last_teleport_time = GlobalVars->realtime;
		cl_move(extra_samples, ctx.tickbase_shift == target_tickbase_shift);
	}

	shifting_tickbase = false;
}

bool CExploits::IsHidingShot() {
	return shot_cmd == ctx.cmd->command_number && exploit_type == E_HideShots;
}

int CExploits::MaxTickbaseShift() {
	return exploit_type == E_DoubleTap ? 13 : 9;
}

void CExploits::ForceTeleport() {
	if (ctx.tickbase_shift > 0) {
		teleport_next_tick = true;
	}
}

void CExploits::HideShot() {
	if (ctx.tickbase_shift > 0)
		shot_cmd = ctx.cmd->command_number;
}

void CExploits::DefensiveDoubletap() {
	static int skipped_ticks = 0;

	if (!ctx.lc_exploit) {
		if (ClientState->m_nChokedCommands)
			skipped_ticks++;
	} else {
		skipped_ticks = 0;
	}

	if (exploit_type != E_DoubleTap || (ctx.active_weapon && ctx.active_weapon->IsGrenade())) {
		defensive_ticks = 0;
		in_defensive = false;
		return;
	}

	if (defensive_this_tick)
		in_defensive = true;

	if (in_defensive) {
		if (defensive_ticks != 0 || skipped_ticks > 2)
			defensive_ticks++;
	}

	if (defensive_ticks > 14) {
		defensive_ticks = 0;
		if (!defensive_this_tick) {
			in_defensive = false;
		}
	}
}

bool CExploits::ShouldBreakLC() {
	if (!Cheat.LocalPlayer)
		return false;

	if (ctx.tickbase_shift == 0 || teleport_next_tick)
		return false;

	if (shifting_tickbase)
		return false;

	bool result = false;

	if (exploit_type == E_DoubleTap) {
		if (config.ragebot.aimbot.doubletap_options->get(0))
			result = true;

		if (config.ragebot.aimbot.doubletap_options->get(1) && allow_defensive && in_defensive)
			result = defensive_ticks > 0;
	}

	return result;
}

void CExploits::LC_OverrideTickbase(int shift) {
	should_override_next_tickbase_shift = true;
	override_next_tickbase_shift = shift;
}

int CExploits::LC_TickbaseShift() {
	if (shifting_tickbase || ctx.tickbase_shift == 0)
		return 0;

	if (should_override_next_tickbase_shift)
		return override_next_tickbase_shift;

	if (ctx.active_weapon && ctx.active_weapon->IsGrenade())
		return 0;

	if (exploit_type == E_DoubleTap)
		return ShouldBreakLC() ? 14 : 0;

	return (abs(ctx.cmd->command_number - shot_cmd) <= 4) ? 9 : 0;
}

bool CExploits::IsDefensiveActive() {
	return config.ragebot.aimbot.doubletap_options->get(1) && defensive_ticks > 0 && exploit_type == E_DoubleTap && ctx.tickbase_shift > 0 && !should_override_next_tickbase_shift;
}

CExploits* Exploits = new CExploits;